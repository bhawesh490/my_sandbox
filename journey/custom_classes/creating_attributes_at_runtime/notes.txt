1-we saw that we can add to an instance namespace directly at runtime by using setattr or the dot notation

class MyClass:
    language = 'Hindi'

obj = MyClass()  obj.__dict__ ->{}
obj.version = '3.7' obj.__dict__ ->{'version':'3.7'}

what happens if we create a new attribute whose value is a function?
obj.say_hello = lambda: 'Hello World!'

then
obj.say_hello->function not a bound method (since we are assiging it outside of the class)
obj.say_hello() ->'Hello World'

but say_hello does not have access to the instance namespace

so
can we create and bind a method to an instance at runtime?
yes

->just need to defina a method that binds the function to the instance

class MyClass:
    language = 'Python'

obj = MyClass()

from types import MethodType(is a class)
MethodType(function, object)
function:function we want to bind
object:object to bind to

obj.say_hello = MethodType(lambda self:f'Hello from {self.language}', obj)

say_hello is now a method bound to obj -->'Hello from Python'
only obj has been affected
no other instance have that method







